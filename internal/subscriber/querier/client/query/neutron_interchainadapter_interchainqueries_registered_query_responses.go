// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NeutronInterchainadapterInterchainqueriesRegisteredQueryReader is a Reader for the NeutronInterchainadapterInterchainqueriesRegisteredQuery structure.
type NeutronInterchainadapterInterchainqueriesRegisteredQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNeutronInterchainadapterInterchainqueriesRegisteredQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewNeutronInterchainadapterInterchainqueriesRegisteredQueryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNeutronInterchainadapterInterchainqueriesRegisteredQueryOK creates a NeutronInterchainadapterInterchainqueriesRegisteredQueryOK with default headers values
func NewNeutronInterchainadapterInterchainqueriesRegisteredQueryOK() *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK {
	return &NeutronInterchainadapterInterchainqueriesRegisteredQueryOK{}
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueryOK describes a response with status code 200, with default header values.

A successful response.
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueryOK struct {
	Payload *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody
}

// IsSuccess returns true when this neutron interchainadapter interchainqueries registered query o k response has a 2xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this neutron interchainadapter interchainqueries registered query o k response has a 3xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this neutron interchainadapter interchainqueries registered query o k response has a 4xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this neutron interchainadapter interchainqueries registered query o k response has a 5xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this neutron interchainadapter interchainqueries registered query o k response a status code equal to that given
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) IsCode(code int) bool {
	return code == 200
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) Error() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_query][%d] neutronInterchainadapterInterchainqueriesRegisteredQueryOK  %+v", 200, o.Payload)
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) String() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_query][%d] neutronInterchainadapterInterchainqueriesRegisteredQueryOK  %+v", 200, o.Payload)
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) GetPayload() *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody {
	return o.Payload
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNeutronInterchainadapterInterchainqueriesRegisteredQueryDefault creates a NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault with default headers values
func NewNeutronInterchainadapterInterchainqueriesRegisteredQueryDefault(code int) *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault {
	return &NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault{
		_statusCode: code,
	}
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault struct {
	_statusCode int

	Payload *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody
}

// Code gets the status code for the neutron interchainadapter interchainqueries registered query default response
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this neutron interchainadapter interchainqueries registered query default response has a 2xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this neutron interchainadapter interchainqueries registered query default response has a 3xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this neutron interchainadapter interchainqueries registered query default response has a 4xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this neutron interchainadapter interchainqueries registered query default response has a 5xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this neutron interchainadapter interchainqueries registered query default response a status code equal to that given
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) Error() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_query][%d] NeutronInterchainadapterInterchainqueriesRegisteredQuery default  %+v", o._statusCode, o.Payload)
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) String() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_query][%d] NeutronInterchainadapterInterchainqueriesRegisteredQuery default  %+v", o._statusCode, o.Payload)
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) GetPayload() *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody {
	return o.Payload
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody neutron interchainadapter interchainqueries registered query default body
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered query default body
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NeutronInterchainadapterInterchainqueriesRegisteredQuery default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NeutronInterchainadapterInterchainqueriesRegisteredQuery default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries registered query default body based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NeutronInterchainadapterInterchainqueriesRegisteredQuery default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NeutronInterchainadapterInterchainqueriesRegisteredQuery default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered query default body details items0
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries registered query default body details items0 based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueryDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody neutron interchainadapter interchainqueries registered query o k body
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody struct {

	// registered query
	RegisteredQuery *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery `json:"registered_query,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered query o k body
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRegisteredQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody) validateRegisteredQuery(formats strfmt.Registry) error {
	if swag.IsZero(o.RegisteredQuery) { // not required
		return nil
	}

	if o.RegisteredQuery != nil {
		if err := o.RegisteredQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueryOK" + "." + "registered_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueryOK" + "." + "registered_query")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries registered query o k body based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRegisteredQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody) contextValidateRegisteredQuery(ctx context.Context, formats strfmt.Registry) error {

	if o.RegisteredQuery != nil {
		if err := o.RegisteredQuery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueryOK" + "." + "registered_query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueryOK" + "." + "registered_query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery neutron interchainadapter interchainqueries registered query o k body registered query
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery struct {

	// The IBC connection ID for getting ConsensusState to verify proofs
	ConnectionID string `json:"connection_id,omitempty"`

	// The unique id of the registered query.
	ID string `json:"id,omitempty"`

	// The KV-storage keys for which we want to get values from remote chain
	Keys []*NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0 `json:"keys"`

	// The local chain last block height when the query result was updated.
	LastSubmittedResultLocalHeight string `json:"last_submitted_result_local_height,omitempty"`

	// The remote chain last block height when the query result was updated.
	LastSubmittedResultRemoteHeight string `json:"last_submitted_result_remote_height,omitempty"`

	// The address that registered the query.
	Owner string `json:"owner,omitempty"`

	// The query type identifier: `kv` or `tx` now
	QueryType string `json:"query_type,omitempty"`

	// The filter for transaction search ICQ
	TransactionsFilter string `json:"transactions_filter,omitempty"`

	// Parameter that defines how often the query must be updated.
	UpdatePeriod string `json:"update_period,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered query o k body registered query
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery) validateKeys(formats strfmt.Registry) error {
	if swag.IsZero(o.Keys) { // not required
		return nil
	}

	for i := 0; i < len(o.Keys); i++ {
		if swag.IsZero(o.Keys[i]) { // not required
			continue
		}

		if o.Keys[i] != nil {
			if err := o.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueryOK" + "." + "registered_query" + "." + "keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueryOK" + "." + "registered_query" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries registered query o k body registered query based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Keys); i++ {

		if o.Keys[i] != nil {
			if err := o.Keys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueryOK" + "." + "registered_query" + "." + "keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueryOK" + "." + "registered_query" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0 neutron interchainadapter interchainqueries registered query o k body registered query keys items0
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0 struct {

	// Key you want to read from the storage
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// Path (storage prefix) to the storage where you want to read value by key (usually name of cosmos-sdk module: 'staking', 'bank', etc.)
	Path string `json:"path,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered query o k body registered query keys items0
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries registered query o k body registered query keys items0 based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueryOKBodyRegisteredQueryKeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
