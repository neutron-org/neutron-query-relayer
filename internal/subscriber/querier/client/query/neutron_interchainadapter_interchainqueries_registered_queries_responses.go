// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NeutronInterchainadapterInterchainqueriesRegisteredQueriesReader is a Reader for the NeutronInterchainadapterInterchainqueriesRegisteredQueries structure.
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNeutronInterchainadapterInterchainqueriesRegisteredQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewNeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNeutronInterchainadapterInterchainqueriesRegisteredQueriesOK creates a NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK with default headers values
func NewNeutronInterchainadapterInterchainqueriesRegisteredQueriesOK() *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK {
	return &NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK{}
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK describes a response with status code 200, with default header values.

A successful response.
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK struct {
	Payload *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody
}

// IsSuccess returns true when this neutron interchainadapter interchainqueries registered queries o k response has a 2xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this neutron interchainadapter interchainqueries registered queries o k response has a 3xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this neutron interchainadapter interchainqueries registered queries o k response has a 4xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this neutron interchainadapter interchainqueries registered queries o k response has a 5xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this neutron interchainadapter interchainqueries registered queries o k response a status code equal to that given
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) IsCode(code int) bool {
	return code == 200
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) Error() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_queries][%d] neutronInterchainadapterInterchainqueriesRegisteredQueriesOK  %+v", 200, o.Payload)
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) String() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_queries][%d] neutronInterchainadapterInterchainqueriesRegisteredQueriesOK  %+v", 200, o.Payload)
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) GetPayload() *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody {
	return o.Payload
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault creates a NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault with default headers values
func NewNeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault(code int) *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault {
	return &NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault{
		_statusCode: code,
	}
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault struct {
	_statusCode int

	Payload *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody
}

// Code gets the status code for the neutron interchainadapter interchainqueries registered queries default response
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this neutron interchainadapter interchainqueries registered queries default response has a 2xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this neutron interchainadapter interchainqueries registered queries default response has a 3xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this neutron interchainadapter interchainqueries registered queries default response has a 4xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this neutron interchainadapter interchainqueries registered queries default response has a 5xx status code
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this neutron interchainadapter interchainqueries registered queries default response a status code equal to that given
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) Error() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_queries][%d] NeutronInterchainadapterInterchainqueriesRegisteredQueries default  %+v", o._statusCode, o.Payload)
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) String() string {
	return fmt.Sprintf("[GET /neutron/interchainqueries/registered_queries][%d] NeutronInterchainadapterInterchainqueriesRegisteredQueries default  %+v", o._statusCode, o.Payload)
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) GetPayload() *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody {
	return o.Payload
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody neutron interchainadapter interchainqueries registered queries default body
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0 `json:"details"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered queries default body
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NeutronInterchainadapterInterchainqueriesRegisteredQueries default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NeutronInterchainadapterInterchainqueriesRegisteredQueries default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries registered queries default body based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NeutronInterchainadapterInterchainqueriesRegisteredQueries default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NeutronInterchainadapterInterchainqueriesRegisteredQueries default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := anypb.New(foo)
//      if err != nil {
//        ...
//      }
//      ...
//      foo := &pb.Foo{}
//      if err := any.UnmarshalTo(foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	AtType string `json:"@type,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered queries default body details items0
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries registered queries default body details items0 based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueriesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody neutron interchainadapter interchainqueries registered queries o k body
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody struct {

	// pagination
	Pagination *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination `json:"pagination,omitempty"`

	// registered queries
	RegisteredQueries []*NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0 `json:"registered_queries"`
}

// Validate validates this neutron interchainadapter interchainqueries registered queries o k body
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegisteredQueries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueriesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueriesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody) validateRegisteredQueries(formats strfmt.Registry) error {
	if swag.IsZero(o.RegisteredQueries) { // not required
		return nil
	}

	for i := 0; i < len(o.RegisteredQueries); i++ {
		if swag.IsZero(o.RegisteredQueries[i]) { // not required
			continue
		}

		if o.RegisteredQueries[i] != nil {
			if err := o.RegisteredQueries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueriesOK" + "." + "registered_queries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueriesOK" + "." + "registered_queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries registered queries o k body based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegisteredQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueriesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueriesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody) contextValidateRegisteredQueries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RegisteredQueries); i++ {

		if o.RegisteredQueries[i] != nil {
			if err := o.RegisteredQueries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueriesOK" + "." + "registered_queries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("neutronInterchainadapterInterchainqueriesRegisteredQueriesOK" + "." + "registered_queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination pagination defines the pagination in the response.
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered queries o k body pagination
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries registered queries o k body pagination based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0 neutron interchainadapter interchainqueries registered queries o k body registered queries items0
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0 struct {

	// The IBC connection ID for getting ConsensusState to verify proofs
	ConnectionID string `json:"connection_id,omitempty"`

	// The unique id of the registered query.
	ID string `json:"id,omitempty"`

	// The KV-storage keys for which we want to get values from remote chain
	Keys []*NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0 `json:"keys"`

	// The local chain last block height when the query result was updated.
	LastSubmittedResultLocalHeight string `json:"last_submitted_result_local_height,omitempty"`

	// The remote chain last block height when the query result was updated.
	LastSubmittedResultRemoteHeight string `json:"last_submitted_result_remote_height,omitempty"`

	// The address that registered the query.
	Owner string `json:"owner,omitempty"`

	// The query type identifier: `kv` or `tx` now
	QueryType string `json:"query_type,omitempty"`

	// The filter for transaction search ICQ
	TransactionsFilter string `json:"transactions_filter,omitempty"`

	// Parameter that defines how often the query must be updated.
	UpdatePeriod string `json:"update_period,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered queries o k body registered queries items0
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0) validateKeys(formats strfmt.Registry) error {
	if swag.IsZero(o.Keys) { // not required
		return nil
	}

	for i := 0; i < len(o.Keys); i++ {
		if swag.IsZero(o.Keys[i]) { // not required
			continue
		}

		if o.Keys[i] != nil {
			if err := o.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries registered queries o k body registered queries items0 based on the context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Keys); i++ {

		if o.Keys[i] != nil {
			if err := o.Keys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0 neutron interchainadapter interchainqueries registered queries o k body registered queries items0 keys items0
swagger:model NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0
*/
type NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0 struct {

	// Key you want to read from the storage
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// Path (storage prefix) to the storage where you want to read value by key (usually name of cosmos-sdk module: 'staking', 'bank', etc.)
	Path string `json:"path,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries registered queries o k body registered queries items0 keys items0
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries registered queries o k body registered queries items0 keys items0 based on context it is used
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesRegisteredQueriesOKBodyRegisteredQueriesItems0KeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
