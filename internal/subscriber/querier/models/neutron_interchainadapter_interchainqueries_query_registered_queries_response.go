// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse neutron interchainadapter interchainqueries query registered queries response
//
// swagger:model neutron.interchainadapter.interchainqueries.QueryRegisteredQueriesResponse
type NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse struct {

	// pagination
	Pagination *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination `json:"pagination,omitempty"`

	// registered queries
	RegisteredQueries []*NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0 `json:"registered_queries"`
}

// Validate validates this neutron interchainadapter interchainqueries query registered queries response
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredQueries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse) validateRegisteredQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisteredQueries) { // not required
		return nil
	}

	for i := 0; i < len(m.RegisteredQueries); i++ {
		if swag.IsZero(m.RegisteredQueries[i]) { // not required
			continue
		}

		if m.RegisteredQueries[i] != nil {
			if err := m.RegisteredQueries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registered_queries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registered_queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query registered queries response based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisteredQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse) contextValidateRegisteredQueries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegisteredQueries); i++ {

		if m.RegisteredQueries[i] != nil {
			if err := m.RegisteredQueries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registered_queries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registered_queries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination pagination defines the pagination in the response.
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination
type NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query registered queries response pagination
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query registered queries response pagination based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0 neutron interchainadapter interchainqueries query registered queries response registered queries items0
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0
type NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0 struct {

	// The IBC connection ID for getting ConsensusState to verify proofs
	ConnectionID string `json:"connection_id,omitempty"`

	// The unique id of the registered query.
	ID string `json:"id,omitempty"`

	// The KV-storage keys for which we want to get values from remote chain
	Keys []*NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0 `json:"keys"`

	// The local chain last block height when the query result was updated.
	LastSubmittedResultLocalHeight string `json:"last_submitted_result_local_height,omitempty"`

	// The remote chain last block height when the query result was updated.
	LastSubmittedResultRemoteHeight string `json:"last_submitted_result_remote_height,omitempty"`

	// The address that registered the query.
	Owner string `json:"owner,omitempty"`

	// The query type identifier: `kv` or `tx` now
	QueryType string `json:"query_type,omitempty"`

	// The filter for transaction search ICQ
	TransactionsFilter string `json:"transactions_filter,omitempty"`

	// Parameter that defines how often the query must be updated.
	UpdatePeriod string `json:"update_period,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query registered queries response registered queries items0
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0) validateKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.Keys) { // not required
		return nil
	}

	for i := 0; i < len(m.Keys); i++ {
		if swag.IsZero(m.Keys[i]) { // not required
			continue
		}

		if m.Keys[i] != nil {
			if err := m.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this neutron interchainadapter interchainqueries query registered queries response registered queries items0 based on the context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Keys); i++ {

		if m.Keys[i] != nil {
			if err := m.Keys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0 neutron interchainadapter interchainqueries query registered queries response registered queries items0 keys items0
//
// swagger:model NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0
type NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0 struct {

	// Key you want to read from the storage
	// Format: byte
	Key strfmt.Base64 `json:"key,omitempty"`

	// Path (storage prefix) to the storage where you want to read value by key (usually name of cosmos-sdk module: 'staking', 'bank', etc.)
	Path string `json:"path,omitempty"`
}

// Validate validates this neutron interchainadapter interchainqueries query registered queries response registered queries items0 keys items0
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this neutron interchainadapter interchainqueries query registered queries response registered queries items0 keys items0 based on context it is used
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0) UnmarshalBinary(b []byte) error {
	var res NeutronInterchainadapterInterchainqueriesQueryRegisteredQueriesResponseRegisteredQueriesItems0KeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
