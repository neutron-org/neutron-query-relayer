swagger: '2.0'
info:
  title: HTTP API Console
  version: '0.0.1'
  description: ''
paths:
  /neutron/interchainqueries/registered_queries:
    get:
      operationId: NeutronInterchainadapterInterchainqueriesRegisteredQueries
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              registered_queries:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      description: The unique id of the registered query.
                    owner:
                      type: string
                      description: The address that registered the query.
                    query_type:
                      type: string
                      title: 'The query type identifier: `kv` or `tx` now'
                    keys:
                      type: array
                      items:
                        type: object
                        properties:
                          path:
                            type: string
                            title: >-
                              Path (storage prefix) to the storage where you
                              want to read value by key (usually name of
                              cosmos-sdk module: 'staking', 'bank', etc.)
                          key:
                            type: string
                            format: byte
                            title: Key you want to read from the storage
                      title: >-
                        The KV-storage keys for which we want to get values from
                        remote chain
                    transactions_filter:
                      type: string
                      title: The filter for transaction search ICQ
                    connection_id:
                      type: string
                      title: >-
                        The IBC connection ID for getting ConsensusState to
                        verify proofs
                    update_period:
                      type: string
                      format: uint64
                      description: >-
                        Parameter that defines how often the query must be
                        updated.
                    last_submitted_result_local_height:
                      type: string
                      format: uint64
                      description: >-
                        The local chain last block height when the query result
                        was updated.
                    last_submitted_result_remote_height:
                      type: string
                      format: uint64
                      description: >-
                        The remote chain last block height when the query result
                        was updated.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: owners
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: connection_id
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /neutron/interchainqueries/registered_query:
    get:
      operationId: NeutronInterchainadapterInterchainqueriesRegisteredQuery
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              registered_query:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    description: The unique id of the registered query.
                  owner:
                    type: string
                    description: The address that registered the query.
                  query_type:
                    type: string
                    title: 'The query type identifier: `kv` or `tx` now'
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          title: >-
                            Path (storage prefix) to the storage where you want
                            to read value by key (usually name of cosmos-sdk
                            module: 'staking', 'bank', etc.)
                        key:
                          type: string
                          format: byte
                          title: Key you want to read from the storage
                    title: >-
                      The KV-storage keys for which we want to get values from
                      remote chain
                  transactions_filter:
                    type: string
                    title: The filter for transaction search ICQ
                  connection_id:
                    type: string
                    title: >-
                      The IBC connection ID for getting ConsensusState to verify
                      proofs
                  update_period:
                    type: string
                    format: uint64
                    description: >-
                      Parameter that defines how often the query must be
                      updated.
                  last_submitted_result_local_height:
                    type: string
                    format: uint64
                    description: >-
                      The local chain last block height when the query result
                      was updated.
                  last_submitted_result_remote_height:
                    type: string
                    format: uint64
                    description: >-
                      The remote chain last block height when the query result
                      was updated.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: query_id
          in: query
          required: false
          type: string
          format: uint64
      tags:
        - Query
definitions:
  neutron.interchainadapter.interchainqueries.Block:
    type: object
    properties:
      next_block_header:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: >-
          We need to know block X+1 to verify response of transaction for block
          X

          since LastResultsHash is root hash of all results from the txs from
          the previous block
      header:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: We need to know block X to verify inclusion of transaction for block X
      tx:
        type: object
        properties:
          response:
            type: object
            properties:
              code:
                type: integer
                format: int64
              data:
                type: string
                format: byte
              log:
                type: string
              info:
                type: string
              gas_wanted:
                type: string
                format: int64
              gas_used:
                type: string
                format: int64
              events:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    attributes:
                      type: array
                      items:
                        type: object
                        properties:
                          key:
                            type: string
                            format: byte
                          value:
                            type: string
                            format: byte
                          index:
                            type: boolean
                        description: >-
                          EventAttribute is a single key-value pair, associated
                          with an event.
                  description: >-
                    Event allows application developers to attach additional
                    information to

                    ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                    ResponseDeliverTx.

                    Later, transactions may be queried using these events.
              codespace:
                type: string
          delivery_proof:
            title: >-
              is the Merkle Proof which proves existence of response in block
              with height next_block_header.Height
            type: object
            properties:
              total:
                type: string
                format: int64
              index:
                type: string
                format: int64
              leaf_hash:
                type: string
                format: byte
              aunts:
                type: array
                items:
                  type: string
                  format: byte
          inclusion_proof:
            title: >-
              is the Merkle Proof which proves existence of data in block with
              height header.Height
            type: object
            properties:
              total:
                type: string
                format: int64
              index:
                type: string
                format: int64
              leaf_hash:
                type: string
                format: byte
              aunts:
                type: array
                items:
                  type: string
                  format: byte
          data:
            type: string
            format: byte
            title: is body of the transaction
  neutron.interchainadapter.interchainqueries.KVKey:
    type: object
    properties:
      path:
        type: string
        title: >-
          Path (storage prefix) to the storage where you want to read value by
          key (usually name of cosmos-sdk module: 'staking', 'bank', etc.)
      key:
        type: string
        format: byte
        title: Key you want to read from the storage
  neutron.interchainadapter.interchainqueries.QueryRegisteredQueriesResponse:
    type: object
    properties:
      registered_queries:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              description: The unique id of the registered query.
            owner:
              type: string
              description: The address that registered the query.
            query_type:
              type: string
              title: 'The query type identifier: `kv` or `tx` now'
            keys:
              type: array
              items:
                type: object
                properties:
                  path:
                    type: string
                    title: >-
                      Path (storage prefix) to the storage where you want to
                      read value by key (usually name of cosmos-sdk module:
                      'staking', 'bank', etc.)
                  key:
                    type: string
                    format: byte
                    title: Key you want to read from the storage
              title: >-
                The KV-storage keys for which we want to get values from remote
                chain
            transactions_filter:
              type: string
              title: The filter for transaction search ICQ
            connection_id:
              type: string
              title: >-
                The IBC connection ID for getting ConsensusState to verify
                proofs
            update_period:
              type: string
              format: uint64
              description: Parameter that defines how often the query must be updated.
            last_submitted_result_local_height:
              type: string
              format: uint64
              description: >-
                The local chain last block height when the query result was
                updated.
            last_submitted_result_remote_height:
              type: string
              format: uint64
              description: >-
                The remote chain last block height when the query result was
                updated.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
  neutron.interchainadapter.interchainqueries.QueryRegisteredQueryResponse:
    type: object
    properties:
      registered_query:
        type: object
        properties:
          id:
            type: string
            format: uint64
            description: The unique id of the registered query.
          owner:
            type: string
            description: The address that registered the query.
          query_type:
            type: string
            title: 'The query type identifier: `kv` or `tx` now'
          keys:
            type: array
            items:
              type: object
              properties:
                path:
                  type: string
                  title: >-
                    Path (storage prefix) to the storage where you want to read
                    value by key (usually name of cosmos-sdk module: 'staking',
                    'bank', etc.)
                key:
                  type: string
                  format: byte
                  title: Key you want to read from the storage
            title: >-
              The KV-storage keys for which we want to get values from remote
              chain
          transactions_filter:
            type: string
            title: The filter for transaction search ICQ
          connection_id:
            type: string
            title: The IBC connection ID for getting ConsensusState to verify proofs
          update_period:
            type: string
            format: uint64
            description: Parameter that defines how often the query must be updated.
          last_submitted_result_local_height:
            type: string
            format: uint64
            description: >-
              The local chain last block height when the query result was
              updated.
          last_submitted_result_remote_height:
            type: string
            format: uint64
            description: >-
              The remote chain last block height when the query result was
              updated.
  neutron.interchainadapter.interchainqueries.RegisteredQuery:
    type: object
    properties:
      id:
        type: string
        format: uint64
        description: The unique id of the registered query.
      owner:
        type: string
        description: The address that registered the query.
      query_type:
        type: string
        title: 'The query type identifier: `kv` or `tx` now'
      keys:
        type: array
        items:
          type: object
          properties:
            path:
              type: string
              title: >-
                Path (storage prefix) to the storage where you want to read
                value by key (usually name of cosmos-sdk module: 'staking',
                'bank', etc.)
            key:
              type: string
              format: byte
              title: Key you want to read from the storage
        title: The KV-storage keys for which we want to get values from remote chain
      transactions_filter:
        type: string
        title: The filter for transaction search ICQ
      connection_id:
        type: string
        title: The IBC connection ID for getting ConsensusState to verify proofs
      update_period:
        type: string
        format: uint64
        description: Parameter that defines how often the query must be updated.
      last_submitted_result_local_height:
        type: string
        format: uint64
        description: The local chain last block height when the query result was updated.
      last_submitted_result_remote_height:
        type: string
        format: uint64
        description: The remote chain last block height when the query result was updated.